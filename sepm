#!/bin/bash

# simple emacs profile manager


datadir=~/.local/share/sepm;
profilesdir=$datadir/profiles;
initfile=$datadir/init_done;



quit_because_no_init() {
	>&2 cat <<ERROR;

You must run the command "sepm init" (If you doubt the following, just
make a quick backup of your .emacs.d folder beforehand, and delete
your backup later). The init command will create sepm's data
directory, move your .emacs.d inside, and rename it as "main".

	sepm's data directory:
		${datadir}

After that, run the command "sepm ls" to list all your profiles. You
should see one profile called "main".

Finally, run the command "sepm use main" to make ~/.emacs.d a symlink
to your profile called "main".

ERROR
	exit 1;
}

help() {
	cat <<HELP;
SYNOPSIS

	$(basename "$0") [-h] <command> [<arguments>]...

DESCRIPTION

	A simple profile manager for emacs. Manages multiple emacs
	"profiles" by turning .emacs.d into a symlink to other folders,
	and you refer to profiles by a name instead of a path.

COMMANDS

	init

		Create sepm's local storage and moves your .emacs.d inside.

	status

		Shows the last "use" command.

	ls [-- [<options>]...]

		Shows all existing profiles by running the ls command in the
		directory containing the profiles. Use -- once to escape the
		arguments provided to ls.

	use <name>

		Changes which folder (profile) ~/.emacs.d is a symlink to.

	fork [--from <name>] [--use] <name>

		Creates a new profile called <name> by copying the current
		profile. If --use is provided, then use this profile now. If
		--from is provided, then copy this profile instead of the
		profile currently in use.

	new [--use] <name>

		Creates a new "empty" profile called <name>, with an empty
		init.el file. If --use is provided, then use this profile now.

	rm <name>

		Removes the profile called <name>. Be careful.

	with <name> [-- [<options>]...]

		Launch emacs with a profile different than the one currently
		in use by passing the --init-directory argument to emacs, and
		optionnaly more arguments. --init-directory was introduced in
		emacs version 29, and this script does not check what emacs
		version you have.

FILES

	sepm's data directory:
		${datadir}

	sepm's profiles directory:
		${profilesdir}

SEE ALSO

	https://github.com/alphapapa/with-emacs.sh
	https://github.com/plexus/chemacs
	https://github.com/plexus/chemacs2
	--init-directory (since emacs version 29)

HELP
}



opt_use=0;
opt_from="";



# first pass to separate combined options (-asdf becomes -a -s -d -f)
trailing_args=();
while (($#)); do
	arg=$1;
	shift;
	case "$arg" in
		(--?*)
			trailing_args+=("$arg");
			;;
		(--)
			trailing_args+=(--);
			break;
			;;
		(-*)
			for letter in $(echo "${arg#-}" | grep -o .); do
				trailing_args+=("-$letter");
			done;
			;;
		(*)
			trailing_args+=("$arg");
			;;
	esac;
done;
set -- "${trailing_args[@]}" "$@";

trailing_args=();
while (($#)); do
	arg=$1;
	shift;
	case "$arg" in
		(-h|--help)
			help;
			exit 0;
			;;
		(--use)
			opt_use=1;
			;;
		(--from)
			opt_from=$1;
			shift;
			;;
		(--)
			break;
			;;
		(-*)
			>&2 echo "Unknown option: $arg";
			exit 1;
			;;
		(*)
			trailing_args+=("$arg");
			;;
	esac;
done;
set -- "${trailing_args[@]}" "$@";
unset arg letter;



commands=(
	init
	status
	fork
	use
	new
	ls
	rm
	with
);


ensure_init() {
	mkdir -p "$datadir";
	mkdir -p "$profilesdir";
	touch "$datadir/last_use";

	# if we are doing the init (instead of ensuring it), only now we have to move the .emacs.d
	if ! [ -f "$initfile" ]; then
		if [ -d ~/.emacs.d ]; then
			mv ~/.emacs.d "$profilesdir/main";
		fi;
	fi;

	touch "$initfile";
}


# use the return code to know whether init has been done or not
test_init() {
	if [ -f "$initfile" ]; then
		return 0;
	fi;
	# we do the init automatically if there are no .emacs.d
	if ! [ -d ~/.emacs.d ]; then
		ensure_init;
		return 0;
	fi;
	return 1;
}



test_name() {
	local name=$1;
	local newname=${name//[.\/ ]/};
	[ -z "$name" ] && return 1;
	[ "$newname" == "$name" ];
	return $?;
}

quit_because_name() {
	>&2 cat <<"ERROR";

Please don't use special characters such as ".", " ", or "/" in a
name.

ERROR
	exit 1;
}


test_profile_exists() {
	local name=$1;
	test_name "$name" || return 1;
	[ -d "$profilesdir/$name" ];
	return $?;
}

quit_because() {
	local code=$1;
	shift;
	>&2 echo "$@";
	exit "$code";
}


command_init() {
    ensure_init;
}

command_status() {
	test_init || quit_because_no_init;
    echo "last use: $(cat "$datadir/last_use")";
}

command_fork() {
	test_init || quit_because_no_init;

	local name=$1;
	shift;

	local src=~/.emacs.d;
	if [ -n "$opt_from" ]; then
		test_profile_exists "$opt_from" || \
			quit_because 1 "The profile $opt_from given to --from does not exist.";

		src=$profilesdir/$opt_from;
	fi;

	(($# > 0)) && quit_because 1 "Too many arguments.";
	test_name "$name" || quit_because_name;

	test_profile_exists "$name" && \
		quit_because 1 "Cannot create profile $name because the name is already taken.";

	[ -d "$src" ] || \
		quit_because 1 "Cannot fork because no profile is currently in use.";
	
	cp -Lr "$src" "$profilesdir/$name";
	
	if ((opt_use)); then
		command_use "$name";
	fi;
}

command_use() {
	test_init || quit_because_no_init;

	local name=$1;
	test_profile_exists "$name" || \
		quit_because 1 "The profile $name does not exist.";

	rm -rf ~/.emacs.d;
	ln -s  "$profilesdir/$name" ~/.emacs.d;
	echo "$name" > "$datadir/last_use";
}

command_new() {
	test_init || quit_because_no_init;

	local name=$1;
	test_name "$name" || quit_because_name;

	test_profile_exists "$name" && \
		quit_because 1 "Cannot create profile $name because the name is already taken.";

	local dir=$profilesdir/$name;
	mkdir -p "$dir";
	touch "$dir/init.el";

	if ((opt_use)); then
		command_use "$name";
	fi;
}

command_ls() {
	test_init || quit_because_no_init;
    ls "$profilesdir" "$@";
}

command_rm() {
	test_init || quit_because_no_init;

	local name=$1;
	test_name "$name" || quit_because_name;

	test_profile_exists "$name" || \
		quit_because 1 "Profile $name does not exist.";
	
	rm -r "$profilesdir/$name";
}

command_with() {
	test_init || quit_because_no_init;
	
	local name=$1;
	shift;

	test_profile_exists "$name" || \
		quit_because 1 "The profile $name does not exist.";

	exec emacs --init-directory "$profilesdir/$name" "$@";
}








main() {
	if (($# < 1)); then
		>&2 echo "No command provided. See --help";
		exit 1;
	fi;
	
	local command=$1;
	shift;
	local candidate;
	for candidate in "${commands[@]}"; do
		if [ "$candidate" == "$command" ]; then
			"command_$command" "$@";
			return $?;
			break;
		fi;
	done;

	>&2 echo "Unknown command: $command";
	return 1;
}


main "$@";
exit $?;
